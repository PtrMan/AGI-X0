using System.Collections.Generic;

using MetaNix.nars.derivation;

namespace MetaNix.nars.autogenerated {
    public class Autogenerated {


        public static IList<TemporaryDerivedTerm> derive(CompoundAndTermContext compoundAndTermContext, Compound premiseLeft, Compound premiseRight, bool isQuestion) {

            IList<TemporaryDerivedTerm> resultTerms = new List<TemporaryDerivedTerm>();

            if (
               // AUTOGEN< check flags for match >
               ((premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, true, true, false)))

               // AUTOGEN< check for source pattern >
               && (true && (premiseLeft.left(compoundAndTermContext) == premiseRight.left(compoundAndTermContext)) && (premiseLeft.right(compoundAndTermContext) == premiseRight.right(compoundAndTermContext)))

               // AUTOGEN< check eventually for the preconditions >
               && isQuestion
           ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseLeft.left(compoundAndTermContext), premiseRight.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.STRUCTINT));
            }

            else if (
                // AUTOGEN< check flags for match >
                ((premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, true, true, false)) && (premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

                // AUTOGEN< check for source pattern >
                && (true && (premiseRight.left(compoundAndTermContext) == premiseLeft.left(compoundAndTermContext)) && (premiseRight.right(compoundAndTermContext) == premiseLeft.right(compoundAndTermContext)))

                // AUTOGEN< check eventually for the preconditions >
                && isQuestion
            ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseRight.left(compoundAndTermContext), premiseLeft.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.STRUCTINT));
            }

            if (
               // AUTOGEN< check flags for match >
               ((premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, true, true, false)) && (premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

               // AUTOGEN< check for source pattern >
               && (true && (premiseLeft.left(compoundAndTermContext) == premiseRight.left(compoundAndTermContext)) && (premiseLeft.right(compoundAndTermContext) == premiseRight.right(compoundAndTermContext)))

               // AUTOGEN< check eventually for the preconditions >
               && isQuestion
           ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, true, true, false), premiseLeft.left(compoundAndTermContext), premiseRight.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.STRUCTABD));
            }

            else if (
                // AUTOGEN< check flags for match >
                ((premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, true, true, false)))

                // AUTOGEN< check for source pattern >
                && (true && (premiseRight.left(compoundAndTermContext) == premiseLeft.left(compoundAndTermContext)) && (premiseRight.right(compoundAndTermContext) == premiseLeft.right(compoundAndTermContext)))

                // AUTOGEN< check eventually for the preconditions >
                && isQuestion
            ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, true, true, false), premiseRight.left(compoundAndTermContext), premiseLeft.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.STRUCTABD));
            }

            if (
               // AUTOGEN< check flags for match >
               ((premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

               // AUTOGEN< check for source pattern >
               && (true && (premiseLeft.left(compoundAndTermContext) == premiseRight.right(compoundAndTermContext)) && (premiseLeft.right(compoundAndTermContext) == premiseRight.left(compoundAndTermContext)))

               // AUTOGEN< check eventually for the preconditions >
               && isQuestion
           ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseLeft.left(compoundAndTermContext), premiseRight.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.CONVERSION));
            }

            else if (
                // AUTOGEN< check flags for match >
                ((premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

                // AUTOGEN< check for source pattern >
                && (true && (premiseRight.left(compoundAndTermContext) == premiseLeft.right(compoundAndTermContext)) && (premiseRight.right(compoundAndTermContext) == premiseLeft.left(compoundAndTermContext)))

                // AUTOGEN< check eventually for the preconditions >
                && isQuestion
            ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseRight.left(compoundAndTermContext), premiseLeft.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.CONVERSION));
            }

            if (
               // AUTOGEN< check flags for match >
               ((premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

               // AUTOGEN< check for source pattern >
               && (true && (premiseLeft.right(compoundAndTermContext) == premiseRight.left(compoundAndTermContext)))

               // AUTOGEN< check eventually for the preconditions >
               && (premiseLeft.left(compoundAndTermContext) != premiseRight.right(compoundAndTermContext))
           ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseLeft.left(compoundAndTermContext), premiseRight.right(compoundAndTermContext)), RuleTable.EnumTruthFunction.DEDUCTION));
            }

            else if (
                // AUTOGEN< check flags for match >
                ((premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

                // AUTOGEN< check for source pattern >
                && (true && (premiseRight.right(compoundAndTermContext) == premiseLeft.left(compoundAndTermContext)))

                // AUTOGEN< check eventually for the preconditions >
                && (premiseRight.left(compoundAndTermContext) != premiseLeft.right(compoundAndTermContext))
            ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseRight.left(compoundAndTermContext), premiseLeft.right(compoundAndTermContext)), RuleTable.EnumTruthFunction.DEDUCTION));
            }

            if (
               // AUTOGEN< check flags for match >
               ((premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

               // AUTOGEN< check for source pattern >
               && (true && (premiseLeft.left(compoundAndTermContext) == premiseRight.left(compoundAndTermContext)))

               // AUTOGEN< check eventually for the preconditions >
               && (premiseLeft.right(compoundAndTermContext) != premiseRight.right(compoundAndTermContext))
           ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseRight.right(compoundAndTermContext), premiseRight.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.ABDUCTION));
            }

            else if (
                // AUTOGEN< check flags for match >
                ((premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

                // AUTOGEN< check for source pattern >
                && (true && (premiseRight.left(compoundAndTermContext) == premiseLeft.left(compoundAndTermContext)))

                // AUTOGEN< check eventually for the preconditions >
                && (premiseRight.right(compoundAndTermContext) != premiseLeft.right(compoundAndTermContext))
            ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseLeft.right(compoundAndTermContext), premiseLeft.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.ABDUCTION));
            }

            if (
               // AUTOGEN< check flags for match >
               ((premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

               // AUTOGEN< check for source pattern >
               && (true && (premiseLeft.right(compoundAndTermContext) == premiseRight.right(compoundAndTermContext)))

               // AUTOGEN< check eventually for the preconditions >
               && (premiseLeft.left(compoundAndTermContext) != premiseRight.left(compoundAndTermContext))
           ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseLeft.right(compoundAndTermContext), premiseLeft.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.INDUCTION));
            }

            else if (
                // AUTOGEN< check flags for match >
                ((premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

                // AUTOGEN< check for source pattern >
                && (true && (premiseRight.right(compoundAndTermContext) == premiseLeft.right(compoundAndTermContext)))

                // AUTOGEN< check eventually for the preconditions >
                && (premiseRight.left(compoundAndTermContext) != premiseLeft.left(compoundAndTermContext))
            ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseRight.right(compoundAndTermContext), premiseRight.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.INDUCTION));
            }

            if (
               // AUTOGEN< check flags for match >
               ((premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

               // AUTOGEN< check for source pattern >
               && (true && (premiseLeft.right(compoundAndTermContext) == premiseRight.left(compoundAndTermContext)))

               // AUTOGEN< check eventually for the preconditions >
               && (premiseRight.right(compoundAndTermContext) != premiseLeft.left(compoundAndTermContext))
           ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseRight.right(compoundAndTermContext), premiseLeft.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.EXEMPLIFICATION));
            }

            else if (
                // AUTOGEN< check flags for match >
                ((premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

                // AUTOGEN< check for source pattern >
                && (true && (premiseRight.right(compoundAndTermContext) == premiseLeft.left(compoundAndTermContext)))

                // AUTOGEN< check eventually for the preconditions >
                && (premiseLeft.right(compoundAndTermContext) != premiseRight.left(compoundAndTermContext))
            ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseLeft.right(compoundAndTermContext), premiseRight.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.EXEMPLIFICATION));
            }

            if (
               // AUTOGEN< check flags for match >
               ((premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

               // AUTOGEN< check for source pattern >
               && (true && (premiseLeft.left(compoundAndTermContext) == premiseRight.right(compoundAndTermContext)) && (premiseLeft.right(compoundAndTermContext) == premiseRight.left(compoundAndTermContext)))

           // AUTOGEN< check eventually for the preconditions >

           ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, true, true, false), premiseLeft.left(compoundAndTermContext), premiseRight.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.INTERSECTION));
            }

            else if (
                // AUTOGEN< check flags for match >
                ((premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

                // AUTOGEN< check for source pattern >
                && (true && (premiseRight.left(compoundAndTermContext) == premiseLeft.right(compoundAndTermContext)) && (premiseRight.right(compoundAndTermContext) == premiseLeft.left(compoundAndTermContext)))

            // AUTOGEN< check eventually for the preconditions >

            ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, true, true, false), premiseRight.left(compoundAndTermContext), premiseLeft.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.INTERSECTION));
            }

            if (
               // AUTOGEN< check flags for match >
               ((premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, true, true, false)) && (premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

               // AUTOGEN< check for source pattern >
               && (true && (premiseLeft.left(compoundAndTermContext) == premiseRight.right(compoundAndTermContext)) && (premiseLeft.right(compoundAndTermContext) == premiseRight.left(compoundAndTermContext)))

           // AUTOGEN< check eventually for the preconditions >

           ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseLeft.left(compoundAndTermContext), premiseRight.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.REDUCECONJUNCTION));
            }

            else if (
                // AUTOGEN< check flags for match >
                ((premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, true, true, false)))

                // AUTOGEN< check for source pattern >
                && (true && (premiseRight.left(compoundAndTermContext) == premiseLeft.right(compoundAndTermContext)) && (premiseRight.right(compoundAndTermContext) == premiseLeft.left(compoundAndTermContext)))

            // AUTOGEN< check eventually for the preconditions >

            ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseRight.left(compoundAndTermContext), premiseLeft.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.REDUCECONJUNCTION));
            }

            if (
               // AUTOGEN< check flags for match >
               ((premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

               // AUTOGEN< check for source pattern >
               && (true && (premiseLeft.right(compoundAndTermContext) == premiseRight.right(compoundAndTermContext)))

               // AUTOGEN< check eventually for the preconditions >
               && (premiseRight.left(compoundAndTermContext) != premiseLeft.left(compoundAndTermContext))
           ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, true, true, false), premiseLeft.right(compoundAndTermContext), premiseLeft.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.COMPARISON));
            }

            else if (
                // AUTOGEN< check flags for match >
                ((premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

                // AUTOGEN< check for source pattern >
                && (true && (premiseRight.right(compoundAndTermContext) == premiseLeft.right(compoundAndTermContext)))

                // AUTOGEN< check eventually for the preconditions >
                && (premiseLeft.left(compoundAndTermContext) != premiseRight.left(compoundAndTermContext))
            ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, true, true, false), premiseRight.right(compoundAndTermContext), premiseRight.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.COMPARISON));
            }

            if (
               // AUTOGEN< check flags for match >
               ((premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

               // AUTOGEN< check for source pattern >
               && (true && (premiseLeft.left(compoundAndTermContext) == premiseRight.left(compoundAndTermContext)))

               // AUTOGEN< check eventually for the preconditions >
               && (premiseRight.right(compoundAndTermContext) != premiseLeft.right(compoundAndTermContext))
           ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, true, true, false), premiseRight.right(compoundAndTermContext), premiseRight.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.COMPARISON));
            }

            else if (
                // AUTOGEN< check flags for match >
                ((premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

                // AUTOGEN< check for source pattern >
                && (true && (premiseRight.left(compoundAndTermContext) == premiseLeft.left(compoundAndTermContext)))

                // AUTOGEN< check eventually for the preconditions >
                && (premiseLeft.right(compoundAndTermContext) != premiseRight.right(compoundAndTermContext))
            ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, true, true, false), premiseLeft.right(compoundAndTermContext), premiseLeft.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.COMPARISON));
            }

            if (
               // AUTOGEN< check flags for match >
               ((premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, true, true, false)))

               // AUTOGEN< check for source pattern >
               && (true && (premiseLeft.left(compoundAndTermContext) == premiseRight.right(compoundAndTermContext)))

               // AUTOGEN< check eventually for the preconditions >
               && (premiseRight.left(compoundAndTermContext) != premiseLeft.right(compoundAndTermContext))
           ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseLeft.right(compoundAndTermContext), premiseRight.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.ANALOGY));
            }

            else if (
                // AUTOGEN< check flags for match >
                ((premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, true, true, false)) && (premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

                // AUTOGEN< check for source pattern >
                && (true && (premiseRight.left(compoundAndTermContext) == premiseLeft.right(compoundAndTermContext)))

                // AUTOGEN< check eventually for the preconditions >
                && (premiseLeft.left(compoundAndTermContext) != premiseRight.right(compoundAndTermContext))
            ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseRight.right(compoundAndTermContext), premiseLeft.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.ANALOGY));
            }

            if (
               // AUTOGEN< check flags for match >
               ((premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)) && (premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, true, true, false)))

               // AUTOGEN< check for source pattern >
               && (true && (premiseLeft.right(compoundAndTermContext) == premiseRight.right(compoundAndTermContext)))

               // AUTOGEN< check eventually for the preconditions >
               && (premiseRight.left(compoundAndTermContext) != premiseLeft.left(compoundAndTermContext))
           ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseLeft.left(compoundAndTermContext), premiseLeft.right(compoundAndTermContext)), RuleTable.EnumTruthFunction.ANALOGY));
            }

            else if (
                // AUTOGEN< check flags for match >
                ((premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, true, true, false)) && (premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, false, true, false)))

                // AUTOGEN< check for source pattern >
                && (true && (premiseRight.right(compoundAndTermContext) == premiseLeft.right(compoundAndTermContext)))

                // AUTOGEN< check eventually for the preconditions >
                && (premiseLeft.left(compoundAndTermContext) != premiseRight.left(compoundAndTermContext))
            ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, false, true, false), premiseRight.left(compoundAndTermContext), premiseRight.right(compoundAndTermContext)), RuleTable.EnumTruthFunction.ANALOGY));
            }

            if (
               // AUTOGEN< check flags for match >
               ((premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, true, true, false)) && (premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, true, true, false)))

               // AUTOGEN< check for source pattern >
               && (true && (premiseLeft.left(compoundAndTermContext) == premiseRight.right(compoundAndTermContext)))

               // AUTOGEN< check eventually for the preconditions >
               && (premiseRight.left(compoundAndTermContext) != premiseLeft.right(compoundAndTermContext))
           ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, true, true, false), premiseLeft.right(compoundAndTermContext), premiseRight.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.RESEMBLANCE));
            }

            else if (
                // AUTOGEN< check flags for match >
                ((premiseRight.flagsOfCopula == new FlagsOfCopula(true, false, true, true, false)) && (premiseLeft.flagsOfCopula == new FlagsOfCopula(true, false, true, true, false)))

                // AUTOGEN< check for source pattern >
                && (true && (premiseRight.left(compoundAndTermContext) == premiseLeft.right(compoundAndTermContext)))

                // AUTOGEN< check eventually for the preconditions >
                && (premiseLeft.left(compoundAndTermContext) != premiseRight.right(compoundAndTermContext))
            ) {
                resultTerms.Add(TemporaryDerivedTerm.genTerm(DeriverUtilities.genBinary(new FlagsOfCopula(true, false, true, true, false), premiseRight.right(compoundAndTermContext), premiseLeft.left(compoundAndTermContext)), RuleTable.EnumTruthFunction.RESEMBLANCE));
            }
    ;
            return resultTerms;
        }

    }
}
