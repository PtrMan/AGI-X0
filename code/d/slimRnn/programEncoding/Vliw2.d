// a better VLIW instruction set version
// encoding is not anymore handcrafted so it's possible to change the instruction macros fast

module slimRnn.programEncoding.Vliw2;

import memoryLowlevel.StackAllocator;
import slimRnn.SlimRnnStackBasedManipulationInstruction;

import autogenerated.AutogeneratedVliw2;

void vliw2emitInstructions(uint levinInstruction, uint delegate(uint index) translateTypeIndexOfPieceToType, ref StackAllocator!(8, SlimRnnStackBasedManipulationInstruction) resultInstructionStack, out bool invalidEncoding) {
	// mask out prefix
	uint prefix = (levinInstruction >> 8) & 3;

	if( prefix == 0 ) { // two MACROS without arguments
		vliw2emitInstructionsForTwoMacro(levinInstruction, translateTypeIndexOfPieceToType, resultInstructionStack, /*out*/ invalidEncoding);
	}
	else if( prefix == 1 ){ // one macro with argument followed by argument
		vliw2emitInstructionsForOneMacro(levinInstruction, translateTypeIndexOfPieceToType, resultInstructionStack, /*out*/ invalidEncoding);
	}
	else if( prefix == 2 ){
		invalidEncoding = true;
		return;
	}
	else if( prefix == 3 ){ // push 10 bit value

		// TODO
		invalidEncoding = true;
		return;
	}
	else {
		// ignore
	}
}
